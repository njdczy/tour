/* CSS class for zoomed area */

.MagicZoomBigImageCont {
  border: 1px solid #91b817;
  overflow: hidden;
}

.MagicZoomBigImageCont img {
  width: 800px;
  height: 800px;
}

.MagicZoomBigImageCont iframe {
  width: 300px;
  height: 300px;
}

.MagicZoomHeader {
  font: 10px Tahoma, Verdana, Arial, sans-serif;
  color: #fff;
  background: #91b817;
  text-align: center !important;
}

.MagicZoomPup {
  border: 1px solid #aaa;
  background: #fff;
  cursor: hand;
  left: 0;
}

.MagicZoomLoading {
  text-align: center;
  background: #fff;
  color: #444;
  opacity: 0.8;
  padding: 3px 3px 3px 3px !important;
  display: none;
}

.MagicZoomLoading img {
  padding-top: 3px !important;
}

/*.MagicThumb{cursor:url(cursor/zoomin.cur), pointer;outline:none}*/

.MagicThumb-zoomed {
  cursor: default;
}

.MagicThumb span {
  display: none;
}

.MagicThumb-image {
  border: 1px solid #ccc;
  outline: none;
}

/*.MagicThumb-image-zoomed{cursor:url(cursor/zoomout.cur), pointer}*/

.MagicThumb-caption {
  color: #333333;
  background-color: #F0F0F0;
  border: 1px solid #CCC;
  border-top: none;
  font-family: Verdana, Helvetica;
  font-size: 11px;
  padding: 8px 16px;
}

.MagicThumb-controlbar {
  display: block;
  height: 18px;
}

.MagicThumb-controlbar a {
  display: block;
  width: 180px;
  height: 180px;
  margin: 0px 1px;
  outline: none;
  float: left;
  overflow: hidden;
}

.MagicThumb-controlbar a span {
  display: block;
  width: 1000px;
  height: 1000px;
  /*background:transparent url(graphics/controlbar.png) no-repeat 0 0;*/
  outline: none;
  position: absolute;
  left: 0px;
  top: 0px;
}

/*.MagicThumb-loading{border:1px solid #000;background:#fff url(graphics/loader.gif) no-repeat 2px 50%;padding:2px 2px 2px 22px;margin:0;text-decoration:none;text-align:left;font-size:8pt;font-family:sans-serif;}*/

.topbar {
  position: relative;
  z-index: 3;
  height: 50px;
  line-height: 50px;
  color: #7f7f7f;
  font-size: 12px;
  font-weight: 400;
  overflow: hidden;
}

.topbar p {
  margin: 0;
}

.topbar a {
  color: #000;
}

.topbar .links li {
  display: inline-block;
  margin-left: 24px;
}

.header {
  position: relative;
  z-index: 3;
  height: 90px;
  width: 100%;
  background: transparent;
}

.header .logo {
  width: 180px;
  height: 80px;
}

.header .logo img {
  width: 100%;
}

.header .links li {
  display: inline-block;
}

.header .links li.active {
  border-bottom: 2px solid red;
}

.header .links a {
  display: block;
  padding: 30px 15px  10px 15px;
  font-weight: 400;
  color: #000;
  font-family: "Tahoma", "Helvetica Neue", "Lantinghei SC", Arial, "Microsoft Yahei", "Hiragino Sans GB", STXihei, Helvetica, sans-serif;
}

#index .header a {
  color: #fff;
}

.index {
  position: relative;
  top: -90px;
  width: 100%;
  background-color: #b0e4f4;
}

.index .contain {
  position: relative;
  width: 100%;
}

.index .contain video {
  width: 100%;
}

.index .contain:after {
  position: absolute;
  left: 0;
  bottom: -1px;
  display: block;
  content: '';
  width: 100%;
  height: 300px;
  background-size: cover;
  background-image: url(/images/video-cover.png?5b0d72af98f91342a59fd5af5f3b5ce8);
  background-position: left bottom;
  z-index: 10;
}

.index img {
  width: 100%;
}

.index .rel {
  position: relative;
}

.index .part-one {
  height: 1600px;
  background-image: url(/images/bg1.png?a31431a99b0a5550f7aaeabf7aadabf4);
}

.index .part-one li {
  position: absolute;
}

.index .part-one li img {
  width: 80%;
}

.index .part-one .title {
  position: absolute;
  top: 280px;
  right: 50px;
  width: 390px;
  height: 150px;
  background-image: url(/images/cmw.png?497075694fb883462e438b6f737a4357);
  background-size: cover;
}

.index .part-one .one {
  top: 280px;
  left: 200px;
}

.index .part-one .two {
  top: 600px;
  right: 0px;
}

.index .part-one .three {
  top: 900px;
  left: 280px;
}

.index .part-one .four {
  top: 1100px;
  right: 100px;
}

.index .part-two {
  height: 1000px;
  background-image: url(/images/bg2.png?2b23ae9109c95794303af5289b5a6897);
  background-repeat: no-repeat;
  text-align: center;
}

.index .part-two .title {
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%);
  transform: translate(-50%, -50%);
  width: 390px;
  height: 150px;
  background-image: url(/images/gzw2.png?d9aaea2683c4ffca6313a048f9f16334);
  background-size: cover;
}

.index .part-two img {
  margin-top: 300px;
}

.index .part-three {
  height: 790px;
  background-image: url(/images/bg3.png?4976591cc5d7c61cbb8523e7f0d27e6a);
  background-repeat: no-repeat;
  background-position: left bottom;
}

.index .part-three .title {
  margin: 0 auto  60px;
  width: 390px;
  height: 150px;
  background-image: url(/images/dsw.png?6b056a11ad2c44dc358e7b7b9c9d8c2e);
  background-size: cover;
}

.index .part-three ul {
  height: 400px;
}

.index .part-three li {
  position: relative;
  display: inline-block;
}

.index .part-three li.one {
  left: -20px;
}

.index .part-three li.two {
  top: 70px;
  margin: 0 10px;
}

.index .part-three li.three {
  right: -20px;
}

.index .part-three li.four {
  top: 60px;
  right: -100px;
}

.index .part-three li.five {
  right: -150px;
  top: 100px;
}

.dsw .banner-box img {
  width: 100%;
}

.dsw .content {
  padding: 200px 0;
  width: 100%;
  background-image: url(/images/dsw-bg.png?388068f848709c34e361e3418614151c);
}

.dsw .trip-box {
  position: relative;
  margin-bottom: 60px;
  padding: 40px 100px;
  width: 900px;
  height: 370px;
  border-radius: 15px;
  background-color: #fff;
}

.dsw .trip-box .animal {
  position: absolute;
  left: -200px;
  bottom: 20px;
  height: 170px;
  width: 295px;
  background: url(/images/tiger.png?6d411be836add724455d9d85d4e1f511);
  background-repeat: no-repeat;
}

.dsw .trip-box .detail {
  width: 200px;
  text-align: center;
}

.dsw .trip-box .detail p {
  margin: 10px;
  font-size: 12px;
}

.dsw .trip-box .pic {
  width: 500px;
  text-align: center;
}

.dsw .trip-box .pic li {
  display: inline-block;
  margin: 0 15px 15px 0;
}

.dsw .dog .animal {
  left: 100%;
  bottom: 20px;
  height: 280px;
  width: 180px;
  background-image: url(/images/dog.png?e5165f229fa5b40d2e9beafac8ee35eb);
}

.dsw .giraffe .animal {
  left: -140px;
  width: 140px;
  height: 330px;
  background-image: url(/images/giraffe.png?4f023e44feba9d7338aaa6f4eb9dac06);
}

.detail .banner-box img {
  width: 100%;
}

.detail .plan {
  margin-bottom: 150px;
  border: 1px solid #e4e4e4;
}

.detail .plan-header {
  background-color: #e9e9e9;
}

.detail .plan-header li {
  float: left;
  height: 40px;
  line-height: 40px;
  padding: 0 45px;
  font-size: 12px;
  color: #232323;
  border-right: 1px solid #d0d0d0;
  cursor: pointer;
}

.detail .plan-header li.on {
  border-top: 2px solid #815c3d;
  background-color: #fff;
}

.detail .plan-content {
  padding: 60px 50px;
}

.detail .plan-content .plan-ul > li {
  display: none;
}

.detail .plan-content .plan-ul > li.on {
  display: block;
}

.detail .days {
  position: relative;
  padding: 30px 0;
  border-bottom: 1px dashed #e5e5e5;
}

.detail .days:after {
  position: absolute;
  left: 14px;
  top: 90px;
  width: 2px;
  height: 60%;
  content: "";
  z-index: -1;
  background-color: #e3e3e3;
}

.detail .days ol {
  position: relative;
  margin-top: 30px;
  padding: 0 0 0 70px;
  color: #38a962;
}

.detail .days ol.airplane {
  color: #69b9e0;
}

.detail .days ol.description {
  font-size: 14px;
  color: #212121;
}

.detail .days h3.head {
  margin: 0;
  font-size: 18px;
  font-family: "Microsoft YaHei";
  color: #666666;
}

.detail .days span {
  position: absolute;
  top: 0;
  left: 0;
}

.detail .days i {
  position: absolute;
  top: -10px;
  font-size: 30px;
}

.detail .gallery {
  padding: 20px 0 60px 0;
}

.detail .gallery .tour-select {
  position: relative;
  width: 590px;
  height: 320px;
}

.detail .gallery .tour-head {
  text-align: right;
  margin-bottom: 10px;
}

.detail .gallery .share {
  margin-left: 20px;
  font-size: 16px;
  color: #333;
}

.detail .gallery button {
  position: absolute;
  right: 0;
  bottom: 0;
  width: 150px;
  height: 40px;
}

.detail .dtlist li {
  color: #d2d2d2;
  font-size: 15px;
}

.detail .dtlist li i {
  font-size: 17px;
}

.detail form {
  margin-top: 15px;
  padding: 0 20px;
  width: 550px;
  height: 110px;
  background-color: #f9f9f9;
  border: 1px solid #dbdbdb;
}

.detail form li {
  margin-top: 18px !important;
}

.detail form input,
.detail form select {
  display: inline-block;
  border: none;
  height: 28px;
  width: 35px;
  border-left: 1px solid #bababa;
  border-right: 1px solid #bababa;
  text-align: center;
}

.detail form select {
  width: 300px;
  border-radius: 3px;
  border: 1px solid #bababa;
}

.detail form .ipt-group {
  margin-left: 65px;
  width: 100px;
  height: 30px;
  border-radius: 3px;
  text-align: center;
  border: 1px solid #bababa;
  overflow: hidden;
}

.detail form .ipt-group > div {
  float: left;
  width: 33.33%;
  height: 28px;
  line-height: 28px;
  cursor: pointer;
}

.detail form .numberChoose {
  display: inline-block;
  height: 30px;
  line-height: 30px;
}

.detail form .decrease,
.detail form .increase {
  font-size: 18px;
  width: 30px;
  cursor: pointer;
  text-align: center;
}

.detail .cost h3 {
  font-weight: normal;
  font-size: 16px;
  color: #232323;
}

.detail .cost h3 span {
  color: #815c3d;
}

.detail .cost dt,
.detail .cost dd {
  color: #232323;
}

.detail .cost dt {
  float: left;
  width: 100px;
  text-align: right;
}

.detail .cost dd {
  margin-left: 120px;
}

.detail .cost .exceed ol {
  margin-bottom: 30px;
  padding: 0;
  font-size: 12px;
  color: #232323;
}

.preview {
  /* smallImg */
  /* bigImg */
  /* bigView */
}

.preview .smallImg {
  position: relative;
  height: 400px;
  width: 95px;
  background-color: #F1F0F0;
  overflow: hidden;
  float: left;
  margin-left: 20px;
}

.preview .smallImg .test img {
  width: 100%;
}

.preview .scrollbutton {
  width: 95px;
  height: 14px;
  overflow: hidden;
  cursor: pointer;
}

.preview .scrollbutton.smallImgUp,
.preview .scrollbutton.smallImgUp.disabled {
  background: url(/images/d_08.png?69f568c15dbf5c701428eb06bb461c63) no-repeat center;
}

.preview .scrollbutton.smallImgDown,
.preview .scrollbutton.smallImgDown.disabled {
  background: url(/images/d_09.png?12e7ce3c5a8449abb508b7109c5674c9) no-repeat center;
}

.preview #imageMenu {
  height: 355px;
  overflow: hidden;
}

.preview #imageMenu a {
  display: inline-block;
  width: 100%;
}

.preview #imageMenu li {
  margin-bottom: 10px;
  width: 95px;
  height: 70px;
  overflow: hidden;
  text-align: center;
}

.preview .smallImgUp {
  position: absolute;
  top: 0;
  z-index: 99;
}

.preview .smallImgDown {
  position: absolute;
  bottom: 0;
  z-index: 99;
}

.preview #imageMenu li img {
  width: 95px;
  height: 75px;
  cursor: pointer;
  opacity: .3;
}

.preview #showArea {
  background: red;
}

.preview #showArea a {
  display: inline-block;
  width: 100%;
}

.preview #imageMenu a {
  display: inline-block;
  width: 100%;
}

.preview #imageMenu #onlickImg img {
  opacity: 1;
}

.preview #imageMenu li:hover img {
  opacity: .3;
}

.preview .bigImg {
  position: relative;
  margin-right: 30px;
  float: left;
  width: 450px;
  height: 320px;
  overflow: hidden;
}

.preview .bigImg #midimg {
  width: 450px;
  height: 320px;
}

.preview .bigImg #winSelector {
  width: 235px;
  height: 210px;
}

.preview #winSelector {
  position: absolute;
  cursor: crosshair;
  filter: alpha(opacity=15);
  -moz-opacity: 0.15;
  opacity: 0.15;
  background-color: #000;
  border: 1px solid #fff;
}

.preview #bigView {
  position: absolute;
  border: 1px solid #959595;
  overflow: hidden;
  z-index: 999;
}

.preview #bigView img {
  position: absolute;
}

.gzw .banner-box img {
  width: 100%;
}

.gzw .content {
  height: 1830px;
  background-image: url(/images/bg.png?15af0831195c8ca3ac075d2314bab5fe);
}

.gzw .content p {
  float: right;
  margin: 0;
  text-indent: 30px;
  line-height: 1.5;
}

.gzw .content .part1 {
  position: relative;
  height: 578px;
  background-image: url(/images/part1.png?f72dbdae96c5196bc2f2d4002d804d64);
  background-size: cover;
}

.gzw .content .part1 .word-box {
  position: absolute;
  top: 250px;
  right: 150px;
  width: 315px;
  height: 210px;
}

.gzw .content .part2 {
  position: relative;
  height: 519px;
  background-image: url(/images/part2.png?7c2dad1066b1e0132438bc91ce7b1e32);
  background-size: cover;
  background-position: 13px 0;
}

.gzw .content .part2 .word-box {
  position: absolute;
  left: 80px;
  top: 245px;
  width: 365px;
  height: 210px;
}

.gzw .content .part3 {
  position: relative;
  height: 558px;
  background-size: cover;
  background-image: url(/images/part3.png?d23cf91c5b373c9c227057593e3b97d0);
}

.gzw .content .part3 .word-box {
  position: absolute;
  right: 90px;
  top: 100px;
  width: 365px;
  height: 210px;
}

.gzw img {
  width: 100%;
}

.gzw .big-wrapper {
  margin: 0 auto;
  width: 1289px;
}

.wzd {
  background-color: #eaf2d1;
}

.wzd .banner-box img {
  width: 100%;
}

.wzd .news {
  padding: 30px 0 80px 0;
}

.wzd .news .news-head {
  text-align: center;
}

.wzd .news .news-head li {
  display: inline-block;
  margin: 0 13px;
  width: 105px;
  height: 40px;
  text-align: center;
  line-height: 40px;
  border-radius: 5px;
  color: #fff;
  background-color: #c3c3c3;
  cursor: pointer;
}

.wzd .news .news-head li.on {
  background-color: #d66a21;
}

.wzd .news .news-content {
  padding: 30px 0;
}

.wzd .news .news-content li {
  display: none;
  margin-top: 20px;
}

.wzd .news .news-content li.on {
  display: block;
}

.wzd .news .news-content .pic {
  width: 310px;
  height: 210px;
  text-align: center;
  overflow: hidden;
}

.wzd .news .news-content .pic img {
  height: 100%;
}

.wzd .news .news-content .desc {
  position: relative;
  margin-right: 30px;
  width: 820px;
  height: 210px;
}

.wzd .news .news-content .cont {
  display: inline-block;
  display: -webkit-box;
  height: 115px;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 7;
  overflow: hidden;
}

.wzd .news .news-content h3 {
  margin: 15px 0;
  color: #000;
  font-size: 24px;
  font-family: "Tahoma", "Helvetica Neue", "Lantinghei SC", Arial, "Microsoft Yahei", "Hiragino Sans GB", STXihei, Helvetica, sans-serif;
  font-weight: 500;
}

.wzd .news .news-content p {
  margin: 0;
  color: #6b6a6a;
}

.wzd .news .news-content a {
  font-size: 12px;
  color: #666666;
}

.wzd .news .news-content a:hover {
  color: #815c3d;
}

.wzd .news .news-content a.source {
  left: 0;
}

.wzd .news .news-content a.time {
  right: 0;
}

.wzd .news .news-content a.source,
.wzd .news .news-content a.time {
  position: absolute;
  bottom: 10px;
  color: #aaaaaa;
}

.wzd .pagination {
  margin-top: 10px;
  margin-bottom: 60px;
}

.wzd .pagination a,
.wzd .pagination span {
  margin-left: -1px;
  float: left;
  width: 37px;
  height: 37px;
  text-align: center;
  line-height: 37px;
  border: 1px solid #dfdfdf;
  background-color: #fff;
  cursor: pointer;
}

.wzd .pagination a.current,
.wzd .pagination a:hover,
.wzd .pagination span.current,
.wzd .pagination span:hover {
  color: #fff;
  border: 1px solid #d66a21;
  background-color: #d66a21;
}

.wzd .pagination a.prev,
.wzd .pagination span.prev {
  border-top-left-radius: 5px;
  border-bottom-left-radius: 5px;
  font-family: "Hiragino Sans GB", "SimSun";
}

.wzd .pagination a.next,
.wzd .pagination span.next {
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px;
  font-family: "Hiragino Sans GB", "SimSun";
  border-right: 1px solid #dfdfdf;
}

.cmw .banner-box img {
  width: 100%;
}

.cmw .links li {
  margin-bottom: 2px;
}

.cmw .links a {
  display: block;
  width: 300px;
  height: 60px;
  color: #fff;
  line-height: 60px;
  text-align: center;
  font-size: 16px;
}

.cmw .links a.pink {
  background-color: #ef2580;
}

.cmw .links a.two {
  background-color: #8dc741;
}

.cmw .links a.three {
  background-color: #02b6a6;
}

.cmw .links a.four {
  background-color: #f69330;
}

.cmw .links a.five {
  background-color: #e3ea74;
}

.cmw .links a.six {
  background-color: #804098;
}

.cmw .list {
  min-height: 500px;
  width: 900px;
  font-size: 0;
}

.cmw .list li {
  display: inline-block;
  margin: 0 10px 0;
}

.cmw .list a {
  display: block;
  text-align: center;
}

.cmw .list a .imgBox {
  width: 225px;
  height: 335px;
  overflow: hidden;
}

.cmw .list a .imgBox img {
  width: 100%;
}

.cmw .list p {
  font-size: 15px;
}

.footer .panel {
  width: 100%;
  height: 566px;
  background-image: url(/images/ditu.png?08b261345e0bc7f9bacc89b4e9045484);
  background-repeat: no-repeat;
}

.footer .panel .panel-header {
  padding: 50px 0;
  text-align: center;
}

.footer .panel .panel-content {
  padding-top: 50px;
}

.footer .panel .panel-content li {
  margin-bottom: 15px;
}

.footer .panel .panel-content a {
  font-size: 14px;
  color: #666666;
}

.footer .col-3 {
  width: 33.33%;
  float: left;
}

.footer .links {
  height: 70px;
  line-height: 70px;
  text-align: center;
  background-color: #fff;
}

.footer .links ul > li {
  display: inline-block;
  padding: 0 20px;
}

.footer .links a {
  color: #000;
}

.footer .contact {
  width: 100%;
  height: 450px;
  text-align: center;
  background-color: #323232;
  overflow: hidden;
}

.footer .contact li {
  margin-top: 60px;
  color: #fff;
}

.footer .contact li.way {
  margin-top: 35px;
}

.footer .copyright {
  height: 85px;
  width: 100%;
  text-align: center;
  line-height: 85px;
  background-color: #242424;
}

.footer .copyright p {
  margin: 0;
  color: #fff;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */